package jp.ac.kochi_tech.cavigator;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import android.app.Activity;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.SharedPreferences;import android.media.MediaPlayer;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.text.TextUtils.TruncateAt;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.widget.Button;import android.widget.ImageButton;import android.widget.SeekBar;import android.widget.TextView;public class VoiceNavigationActivity extends Activity implements View.OnClickListener, Runnable {    //List<MediaPlayer> music = new ArrayList<MediaPlayer>();    //String path = ("/data/data/jp.example.buttonbutton/files/english/");    String path; // = "/data/data/jp.ac.kochi_tech.cavigator/files/Lan000/";    int musicTrackNum = 0;    int globalMax = 0;    double timeFloorNow;    String timeNow;    public TextView musicNumNowView;    public TextView playTimeNowView;    public TextView playTimeView;    private boolean running;    private Thread thread;      SeekBar seekBar2;    ArrayList<File> musicFiles = new ArrayList<File>();    ArrayList<String> placeName = new ArrayList<String>();    MediaPlayer mp;    TextView titleTextView;        public int createMusic() {        int musicNumMax = 0;        final float VAL = 30 * 0.01f;        int firstMediaFlag = 0;        ArrayList<File> files = new ArrayList<File>();                // ここから        try {            BufferedReader br = new BufferedReader(new InputStreamReader(                    new FileInputStream(path + "location.txt"), "UTF-8"));            String line;            // 空行まで読み飛ばす            while ((line = br.readLine()).length() != 0)                System.out.println(line);            String[] strArray = new String[3];            // URLを記述したテキストの最後の行までループ            while ((line = br.readLine()) != null) {                //int index = line.indexOf(",");                strArray = line.split(",", -1);                File f = new File(path + strArray[2]);                files.add(f);                placeName.add(strArray[1]);            }            br.close();        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        // ここまで                // 場所名を表示, テキストビューの属性を設定        titleTextView = (TextView) findViewById(R.id.voice_PlaceTextView1);        titleTextView.setText(placeName.get(0));        titleTextView.setSingleLine();        titleTextView.setFocusableInTouchMode(true);        titleTextView.setEllipsize(TruncateAt.MARQUEE);                SharedPreferences preference;        preference = getSharedPreferences("downloaded", MODE_PRIVATE);        if (preference.getBoolean("downloaded", false) == true) {            for (int i = 0; i < files.size(); i++) {                try {                    Runtime.getRuntime().exec("chmod 755 " + files.get(i));                } catch (IOException e) {                    e.printStackTrace();                }            }            SharedPreferences.Editor editor = preference.edit();            editor = preference.edit();            editor.putBoolean("downloaded", false);              editor.commit();            System.out.println("Chmodを行いました");        }                for (int i = 0; i < files.size(); i++) {            musicNumMax++;            musicFiles.add(files.get(i));            if (firstMediaFlag == 0) {                try {                    mp.setDataSource(files.get(i).getAbsolutePath());                    mp.prepare();                    mp.seekTo(0);                    mp.setVolume(VAL, VAL);                } catch (Exception e) {                    System.out.println(e);                }                firstMediaFlag = 1;            }        }        globalMax = musicNumMax;        return musicNumMax;                /*int musicNumMax = 0;        float VAL = 30 * 0.01f;        files = new File(path).listFiles();        if(files != null){            Arrays.sort(files);            for (int i = 0; i < files.length; i++) {                try {                    Runtime.getRuntime().exec("chmod 755 " + files[i]);                } catch (IOException e) {                    // TODO 自動生成された catch ブロック                    e.printStackTrace();                }            }            for(int i = 0; i < files.length; i++){                if(files[i].isFile() && files[i].getName().endsWith(".mp3") ||                         files[i].isFile() && files[i].getName().endsWith(".ogg")){                    musicNumMax++;                    MediaPlayer m = MediaPlayer.create(this, Uri.parse(files[i].getAbsolutePath()));                    m.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {                        @Override                        public void onPrepared(MediaPlayer mp) {                            // TODO 自動生成されたメソッド・スタブ                            mp.seekTo(0);                        }                    });                    m.setVolume(VAL,VAL);                    music.add(m);                }            }        }        globalMax = musicNumMax;        return musicNumMax;*/    }        private void getPaths() {        // 現在の言語を習得        SharedPreferences prefs =                 getSharedPreferences("Language", Context.MODE_PRIVATE);        String language = prefs.getString("Language", "");        path = this.getApplicationInfo().dataDir + "/files/" + language + "/";    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setTitle("Voice Guidance");        getActionBar().setDisplayHomeAsUpEnabled(true);         // Keep screen on        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        setContentView(R.layout.activity_voice_navigation);                getPaths();        SharedPreferences preference;        preference = getSharedPreferences("downloaded", MODE_PRIVATE);        if (preference.getBoolean("downloaded", false) == true) {            String[] dstDir = new String[2];            dstDir[0] = this.getApplicationInfo().dataDir + "/files/";            dstDir[1] = path;            for (int i = 0; i < dstDir.length; i++) {                try {                    Runtime.getRuntime().exec("chmod 755 " + dstDir[i]);                } catch (IOException e) {                    e.printStackTrace();                }            }        }                musicNumNowView = (TextView) findViewById(R.id.voice_musicNumberNow);        TextView maxView = (TextView) findViewById(R.id.voice_maxView);        playTimeView = (TextView) findViewById(R.id.voice_playTime);        playTimeNowView = (TextView) findViewById(R.id.voice_playTimeNow);        final TextView volumeView = (TextView) findViewById(R.id.voice_volume);        volumeView.setText(String.valueOf("30"));                        //ホームボタン押された時の準備        HomeButtonReceive m_HomeButtonReceive = new HomeButtonReceive();        IntentFilter iFilter = new IntentFilter();        iFilter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);        this.registerReceiver(m_HomeButtonReceive, iFilter);        /*========MediaPlayer Objectの作成=======*/        mp = new MediaPlayer();        int max = createMusic();        /*==========Create Button==========*/        ImageButton buttonPlay = (ImageButton) findViewById(R.id.voice_mainPlay);        ImageButton buttonNext = (ImageButton) findViewById(R.id.voice_mainNext);        ImageButton buttonBack = (ImageButton) findViewById(R.id.voice_mainBack);        Button camera = (Button) findViewById(R.id.voice_cameraBt);        Button map = (Button) findViewById(R.id.voice_mapBt);        //Button homePlay = (Button) findViewById(R.id.voice_playingHomeBt);        //Button camera = (Button) findViewById(R.id.voice_cameraBt);        //Button map = (Button) findViewById(R.id.voice_map);        /*=======Seek Bar========*/        SeekBar seekBar;                seekBar = (SeekBar) findViewById(R.id.voice_seekBar);        seekBar2 = (SeekBar) findViewById(R.id.voice_seekBar2);        // SeekBar の最大値を設定          seekBar.setMax(100);          seekBar2.setMax(mp.getDuration());                        // SeekBar の現在値を設定          seekBar.setProgress(30);        seekBar2.setProgress(0);                           running = true;        thread = new Thread(this);        thread.start();        /*============TextView==============*/        musicNumNowView.setText(String.valueOf(musicTrackNum+1));        maxView.setText(String.valueOf(max));                        double timeFloor = Math.floor(mp.getDuration()/1000.0); //33100        String time = String.format(" / %02d:%02d", (int)(timeFloor/60),(int)(timeFloor%60));        playTimeView.setText(time);                /*======Button Listener======*/        buttonPlay.setOnClickListener(this);        buttonNext.setOnClickListener(this);        buttonBack.setOnClickListener(this);        //homePlay.setOnClickListener(this);        camera.setOnClickListener(this);        map.setOnClickListener(this);        /*======Volume Setting======*/        seekBar.setOnSeekBarChangeListener(                new SeekBar.OnSeekBarChangeListener() {                    public void onProgressChanged(SeekBar seekBar,                            int progress, boolean fromUser) {                        // ツマミをドラッグしたときに呼ばれる                        float val = progress * 0.01f;                        mp.setVolume(val,val);                        volumeView.setText(String.valueOf(seekBar.getProgress()));                    }                    public void onStartTrackingTouch(SeekBar seekBar) {                        // ツマミに触れたときに呼ばれる                    }                    public void onStopTrackingTouch(SeekBar seekBar) {                        // ツマミを離したときに呼ばれる                    }                }                );                         seekBar2.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            public void onProgressChanged(SeekBar seekBar,                    int progress, boolean fromUser) {                // ツマミをドラッグしたときに呼ばれる                            }            public void onStartTrackingTouch(SeekBar seekBar) {                // ツマミに触れたときに呼ばれる            }            public void onStopTrackingTouch(SeekBar seekBar) {                // ツマミを離したときに呼ばれる                mp.seekTo(seekBar.getProgress());            }        }        );     }            private Handler handler = new Handler() {        public void handleMessage(Message msg) {            seekBar2.setProgress(msg.what);                        timeFloorNow = Math.floor(seekBar2.getProgress()/1000.0); //33100            timeNow = String.format("%02d:%02d", (int)(timeFloorNow/60),(int)(timeFloorNow%60));                        playTimeNowView.setText(timeNow);        }    };         // Run the thread using for seekBar    @Override    public void run(){        while(running){            try {                Thread.sleep(10);            } catch (InterruptedException e) {                e.printStackTrace();            }            handler.sendMessage(Message.obtain(handler, mp.getCurrentPosition()));        }    }        public void start(){        if (!mp.isPlaying()){            mp.seekTo(mp.getCurrentPosition());            mp.start();        }    }        public void stopRunning(){        running = false;    }        public void startRunning(){        running = true;    }                        /*@Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }*/    @Override    public void onClick(View v) {        //System.out.println("タッチされたよ//// : " + v.toString());        if (v == (ImageButton) findViewById(R.id.voice_mainPlay)) {            if (mp.isPlaying()) {                mp.pause();                ((ImageButton)v).setImageResource(R.drawable.playbutton);            } else {                mp.start();                ((ImageButton)v).setImageResource(R.drawable.pausebutton);            }        }        if (v == (ImageButton) findViewById(R.id.voice_mainNext)) {            mp.reset();                        ((ImageButton)findViewById(R.id.voice_mainPlay)).setImageResource(R.drawable.playbutton);                        if (musicTrackNum == musicFiles.size() - 1) {                musicTrackNum = 0;            } else {                musicTrackNum++;            }            //musicTrackNum++;            //musicTrackNum %= musicFiles.size();            //MediaPlayer mp = new MediaPlayer();            try {                mp.setDataSource(musicFiles.get(musicTrackNum).getAbsolutePath());                mp.prepare();                titleTextView.setText(placeName.get(musicTrackNum));            } catch (Exception e) {            }            seekBar2.setMax(mp.getDuration());            seekBar2.setProgress(0);            double timeFloor = Math.floor(mp.getDuration()/1000.0); //33100            String time = String.format(" / %02d:%02d", (int)(timeFloor/60),(int)(timeFloor%60));            playTimeView.setText(time);            musicNumNowView.setText(String.valueOf(musicTrackNum+1));            //music.set(musicTrackNum, mp);        }        if (v == (ImageButton) findViewById(R.id.voice_mainBack)) {            mp.reset();            ((ImageButton)findViewById(R.id.voice_mainPlay)).setImageResource(R.drawable.playbutton);            if (musicTrackNum == 0) {                musicTrackNum = musicFiles.size() - 1;            } else {                musicTrackNum--;            }            //musicTrackNum += musicFiles.size() - 1;            //musicTrackNum %= musicFiles.size();            //MediaPlayer mp = new MediaPlayer();            try {                mp.setDataSource(musicFiles.get(musicTrackNum).getAbsolutePath());                mp.prepare();                titleTextView.setText(placeName.get(musicTrackNum));            } catch (Exception e) {            }            seekBar2.setMax(mp.getDuration());            seekBar2.setProgress(0);            double timeFloor = Math.floor(mp.getDuration()/1000.0); //33100            String time = String.format(" / %02d:%02d", (int)(timeFloor/60),(int)(timeFloor%60));            playTimeView.setText(time);            musicNumNowView.setText(String.valueOf(musicTrackNum+1));           //music.set(musicTrackNum, mp);        }        /*==仮想ホームボタン==*/        /*if (v == (Button) findViewById(R.id.voice_playingHomeBt)) {            Intent intent = new Intent(Intent.ACTION_MAIN);            intent.addCategory(Intent.CATEGORY_HOME);            startActivity(intent);        }*/                /*==CameraBtton==*/        if (v == (Button) findViewById(R.id.voice_cameraBt)) {            //インテントの生成            Intent intent = new Intent();            //インテントのアクションを指定する            intent.setAction("android.media.action.IMAGE_CAPTURE");            //標準搭載されているカメラアプリのアクティビティを起動する            startActivity(intent);        }                /*==MapBtton==*/        if (v == (Button) findViewById(R.id.voice_mapBt)) {            //Intent intent = new Intent(VoiceActivity.this, MapMainActivity.class);            //Context c = VoiceActivity.this;            //Class cls = MapMainActivity.class;            //Intent intent = new Intent(c, cls);            Intent intent1 = new Intent(this, MapDispActivity.class);            startActivity(intent1);        }    }            //ホームボタン押下時のアクション    public class HomeButtonReceive extends BroadcastReceiver{        @Override        public void onReceive(Context arg0, Intent arg1){            //ここにさせたい事を書く            if (mp.isPlaying()) {                mp.pause();            }        }    }        @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        if(keyCode == KeyEvent.KEYCODE_BACK) {            // 戻るボタンの処理            if (mp.isPlaying()) {                mp.reset();            }            return super.onKeyDown(keyCode, event);        } else {            return super.onKeyDown(keyCode, event);        }    }            // オプションメニューの生成    public static final int START_MENU = 0;    //public static final int VOICE_GUIDE = 1;    public static final int INFORMATION = 2;    public static final int SELECT_LANGUAGE = 3;    public static final int HOW_TO_USE = 4;            @Override    public boolean onCreateOptionsMenu(Menu menu) {        menu.add(0, START_MENU, 0, "Start Menu");        //menu.add(0, VOICE_GUIDE, 0, "Voice Guidance");        menu.add(0, INFORMATION, 0, "Text Guidance");        menu.add(0, SELECT_LANGUAGE, 0, "Select Language");        menu.add(0, HOW_TO_USE, 0, "Help");        return true;    }        @Override    public boolean onOptionsItemSelected(MenuItem item) {        Intent intent;        switch (item.getItemId()) {        case START_MENU:            if (mp.isPlaying()) {                mp.pause();            }            intent = new Intent(this, StartMenuActivity.class);            startActivity(intent);            return true;                    /*case VOICE_GUIDE:            if (mp.isPlaying()) {                mp.pause();            }            intent = new Intent(this, VoiceNavigationActivity.class);            startActivity(intent);            return true;*/                    case INFORMATION:            if (mp.isPlaying()) {                mp.pause();            }            intent = new Intent(this, InformationListActivity.class);            startActivity(intent);            return true;                    case SELECT_LANGUAGE:            if (mp.isPlaying()) {                mp.pause();            }            intent = new Intent(this, LanguageDownloadActivity.class);            startActivity(intent);            return true;                    case HOW_TO_USE:            if (mp.isPlaying()) {                mp.pause();            }            intent = new Intent(this, HowToListActivity.class);            startActivity(intent);            return true;                case android.R.id.home:            if (mp.isPlaying()) {                mp.reset();            }            finish();            return true;        }        return super.onOptionsItemSelected(item);    }}