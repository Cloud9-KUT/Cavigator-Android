package jp.ac.kochi_tech.cavigator;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;import java.io.InputStreamReader;import android.app.Activity;import android.content.Intent;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Point;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.text.TextUtils.TruncateAt;import android.view.Display;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;public class InformationDispActivity extends Activity {    int firstDispFlag;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setTitle("Text Guidance");        getActionBar().setDisplayHomeAsUpEnabled(true);         // Keep screen on        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        setContentView(R.layout.activity_information_disp);        firstDispFlag = 0;    }        LinearLayout linearLayout;    @Override    public void onWindowFocusChanged(boolean hasFocus) {        if (firstDispFlag != 0) {            return;        }        // 画像とテキストのファイルパスを取得        Intent intent = getIntent();        String[] imagePath = intent.getStringArrayExtra("imagePath");                linearLayout = (LinearLayout) findViewById(R.id.informationDispLinearLayout1);                // 画面のサイズを取得        Display display = getWindowManager().getDefaultDisplay();        Point p = new Point();        display.getSize(p);                for (int i = 0; i < imagePath.length; i++) {            // 画像を表示            File imageFile = new File(imagePath[i]);            if (imageFile.exists() && imageFile.isFile()) { // ファイルが存在するとき                View v = this.getLayoutInflater().inflate(R.layout.information_disp_column, null);                ImageView imageView = (ImageView)v.findViewById(R.id.informationDispRowImageView1);                                final BitmapFactory.Options options = new BitmapFactory.Options();                options.inJustDecodeBounds = true;                BitmapFactory.decodeFile(imagePath[i]);                options.inSampleSize = calculateInSampleSize(options, p.x, linearLayout.getHeight());                options.inJustDecodeBounds = false;                                Bitmap bmp = BitmapFactory.decodeFile(imagePath[i]);                imageView.setImageBitmap(bmp);                imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);                ViewGroup.LayoutParams params = imageView.getLayoutParams();                                params.width = p.x;                params.height = linearLayout.getHeight();                imageView.setLayoutParams(params);                                linearLayout.addView(v);            } else {                System.out.println("else called");                View v = this.getLayoutInflater().inflate(R.layout.information_disp_column, null);                ImageView imageView = (ImageView)v.findViewById(R.id.informationDispRowImageView1);                                Resources res = getResources();                Drawable drawable = res.getDrawable(R.drawable.noimage);                imageView.setImageDrawable(drawable);                imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);                ViewGroup.LayoutParams params = imageView.getLayoutParams();                                params.width = p.x;                params.height = linearLayout.getHeight();                imageView.setLayoutParams(params);                                linearLayout.addView(v);            }        }                // テキストのファイルパスを取得        String textPath = intent.getStringExtra("textPath");                // テキストを読み出し        File textFile = new File(textPath);        String text = "";        if (textFile.exists() && textFile.isFile()) { // ファイルが存在するとき            try {                InputStream inputStream = new FileInputStream(textPath);                BufferedReader br = new BufferedReader(new InputStreamReader(                        inputStream));                                String str;                while ((str = br.readLine()) != null) {                    text += str + "\n";                }                br.close();            } catch (Exception e) {            }        } else {            text = "Message is not set.";        }                        // テキストを表示        TextView textView = (TextView) findViewById(R.id.informationViewTextView1);        textView.setText(text);                // テキストのファイルパスを取得        String placeName = intent.getStringExtra("placeName");        TextView titleTextView = (TextView) findViewById(R.id.informationDispTitleTextView1);        titleTextView.setText(placeName);        titleTextView.setSingleLine();        titleTextView.setFocusableInTouchMode(true);        titleTextView.setEllipsize(TruncateAt.MARQUEE);                firstDispFlag = 1;    }        public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {                  // 画像の元サイズ          final int height = options.outHeight;          final int width = options.outWidth;          int inSampleSize = 1;                if (height > reqHeight || width > reqWidth) {              if (width > height) {                  inSampleSize = Math.round((float)height / (float)reqHeight);              } else {                  inSampleSize = Math.round((float)width / (float)reqWidth);              }          }          return inSampleSize;      }           // オプションメニューの生成    public static final int START_MENU = 0;    public static final int VOICE_GUIDE = 1;    public static final int INFORMATION = 2;    public static final int SELECT_LANGUAGE = 3;    public static final int HOW_TO_USE = 4;            @Override    public boolean onCreateOptionsMenu(Menu menu) {        menu.add(0, START_MENU, 0, "Start Menu");        menu.add(0, VOICE_GUIDE, 0, "Voice Guidance");        menu.add(0, INFORMATION, 0, "Text Guidance");        menu.add(0, SELECT_LANGUAGE, 0, "Select Language");        menu.add(0, HOW_TO_USE, 0, "Help");        return true;    }        @Override    public boolean onOptionsItemSelected(MenuItem item) {        Intent intent;        switch (item.getItemId()) {        case START_MENU:            intent = new Intent(this, StartMenuActivity.class);            startActivity(intent);            return true;                    case VOICE_GUIDE:            intent = new Intent(this, VoiceNavigationActivity.class);            startActivity(intent);            return true;                    case INFORMATION:            intent = new Intent(this, InformationListActivity.class);            startActivity(intent);            return true;                    case SELECT_LANGUAGE:            intent = new Intent(this, LanguageDownloadActivity.class);            startActivity(intent);            return true;                    case HOW_TO_USE:            intent = new Intent(this, HowToListActivity.class);            startActivity(intent);            return true;                case android.R.id.home:            finish();            return true;        }        return super.onOptionsItemSelected(item);    }    }