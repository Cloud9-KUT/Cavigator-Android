package jp.ac.kochi_tech.cavigator;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.ProtocolException;import java.net.SocketTimeoutException;import java.net.URL;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Locale;import java.util.TimeZone;import android.app.Activity;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.os.AsyncTask;import android.os.Bundle;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.ListView;import android.widget.Toast;public class LanguageDownloadActivity extends Activity {    public ArrayList<String> langId = new ArrayList<String>();    /*Ryugadou*/    //private final String getFilePathUri =  "http://ryugadou.mydns.jp/cgi-bin/getFilepath.cgi";    //private final String getFileTableUri = "http://ryugadou.mydns.jp/cgi-bin/getTable.cgi?tbl=Language";        /*AWS*/    private final String getFilePathUri =  "http://54.68.143.213/cgi-bin/getFilepath.cgi";    private final String getFileTableUri = "http://54.68.143.213/cgi-bin/getTable.cgi?tbl=Language";        /*au Home*/    //private final String getFilePathUri =  "http://192.168.0.101/cgi-bin/getFilepath.cgi";    //private final String getFileTableUri = "http://192.168.0.101/cgi-bin/getTable.cgi?tbl=Language";        private int downloadPhase;  // ダウンロードの進行状況を示す変数 0:言語一覧, 1:URL, 2:ファイル    private String language;    // 画像と音声ファイルを格納したディレクトリ名    private String currentLang; // 現在選択されている言語名    // onCreateメソッド    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setTitle("Select Language");        if (isBooted()) {            getActionBar().setDisplayHomeAsUpEnabled(true);         }        // Keep screen on        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        setContentView(R.layout.activity_language_download);        try {            Class.forName("android.os.AsyncTask");        } catch (ClassNotFoundException e1) {            // TODO 自動生成された catch ブロック            e1.printStackTrace();        }        // ファイルダウンロード開始        startDownload();    }    // アクティビティのリスタート時に呼び出されるメソッド    public void onResume() {        super.onResume();        // リストビュー生成        listViewSet();        ListView lv = (ListView) findViewById(R.id.languageDownloadListView1);        lv.setOnItemClickListener(new ListItemClickListener());        System.out.println("onResume called");    }        private void startDownload () {     // ディレクトリ作成        String[] tarDir = { "/files/", "/files/url/" };        createDir(tarDir);        // テーブルの状態を取得        ArrayList<String> srcFiles = new ArrayList<String>();                srcFiles.add(getFileTableUri);        String[] dstDir = new String[3];        dstDir[0] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                + "/files/english/";        dstDir[1] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                + "/files/pictures/";        dstDir[2] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                + "/files/url/";                // ダウンロード開始        downloadPhase = 0;        AsyncDownloadTask task = new AsyncDownloadTask(srcFiles, dstDir);        task.execute(0);        try {            Class.forName("android.os.AsyncTask");        } catch (ClassNotFoundException e) {        }    }        // 初回起動では自動的に画面遷移をするためStartMenuに戻れないようにする    @Override    public boolean dispatchKeyEvent(KeyEvent event) {        // TODO Auto-generated method stub        if (!isBooted()) {            if (event.getAction() == KeyEvent.ACTION_UP) {                if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {                    moveTaskToBack(true);                    return true;                }            }        }        return super.dispatchKeyEvent(event);    }        // リストビューアイテムクリックリスナークラス    // srcFiles:ダウンロード先URL, dstDir:保存ディレクトリ    class ListItemClickListener implements OnItemClickListener {        // アイテムクリック時に呼び出されるメソッド        public void onItemClick(AdapterView<?> parent, View view, int position,                long id) {            ListView listView = (ListView) parent;            // ファイル名取得            language = (String) listView.getItemAtPosition(position);            language = langId.get(position);            currentLang = alist.get(position); // 選択された言語名を取得            ArrayList<String> srcFiles = new ArrayList<String>();            String dstDir[];            dstDir = new String[3];            String[] tarDir = { "/files/pictures/", "/files/" + language + "/", };            try {                // ローカルに保存するディレクトリ名                dstDir[0] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                        + "/files/" + language + "/";                dstDir[1] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                        + "/files/pictures/";                dstDir[2] = LanguageDownloadActivity.this.getApplicationInfo().dataDir                        + "/files/url/";                // ファイル保存用ディレクトリ作成                createDir(tarDir);                String lang = langId.get(position);                                String sharedPrefsPath = LanguageDownloadActivity.this.getApplicationInfo().dataDir                        + "/shared_prefs";                File[] files = new File(sharedPrefsPath).listFiles();                int fileExistsFlag = 0;                if (files != null) {                    for (int i = 0; i < files.length; i++) {                        // ファイルが存在するか                        if (files[i].getName().equals(lang + "date.xml")) {                            fileExistsFlag = 1;                            break;                        }                    }                }                                if(fileExistsFlag == 1) {                    SharedPreferences prefs = getSharedPreferences(language                            + "date", Context.MODE_PRIVATE);                    String dates = prefs.getString(language + "date", "");                    srcFiles.add(getFilePathUri + "?lang=" + lang                            + "&date=" + dates);                } else {                    srcFiles.add(getFilePathUri + "?lang=" + lang);                }                                downloadPhase = 1;                AsyncDownloadTask task = new AsyncDownloadTask(srcFiles, dstDir);                task.execute(0);            } catch (Exception e) {            }        }    }    // リストビューに表示したい言語名格納用変数    private ArrayList<String> alist = new ArrayList<String>();    // リストビューセットメソッド    public void listViewSet() {        alist.clear();        try {            BufferedReader br = new BufferedReader(new InputStreamReader(                    new FileInputStream(LanguageDownloadActivity.this.getFilesDir()                            .getAbsolutePath() + "/url/language.txt"), "UTF-8"));            String line;            // 空行まで読み飛ばす            while ((line = br.readLine()).length() != 0)                System.out.println(line);            // URLを記述したテキストの最後の行までループ            while ((line = br.readLine()) != null) {                System.out.println(line.substring(0, 3));                /*if (!line.substring(0, 3).equals("Tes")) {                    continue;                }*/                langId.add(line.substring(0, line.indexOf(",")));                alist.add(line.substring(line.indexOf(",") + 1, line.length()));            }            br.close();        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        } catch (FileNotFoundException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        // アレイアダプタの生成        ArrayAdapter<String> la = new ArrayAdapter<String>(this,                android.R.layout.simple_list_item_1, alist);        ListView listView = (ListView) findViewById(R.id.languageDownloadListView1);        listView.setAdapter(la);    }        // 初回ダウンロード失敗時のダイアログ生成    private void createRetryDialog() {        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);        // アラートダイアログのタイトルを設定します        alertDialogBuilder.setTitle("Connection Timeout");        // アラートダイアログのメッセージを設定します        alertDialogBuilder.setMessage(                "Please retry Language-Select in a place under good radio wave condition.");        // アラートダイアログの肯定ボタンがクリックされた時に呼び出されるコールバックリスナーを登録します        /*alertDialogBuilder.setPositiveButton("Retry",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        startDownload();                    }                });        // アラートダイアログの中立ボタンがクリックされた時に呼び出されるコールバックリスナーを登録します        alertDialogBuilder.setNeutralButton("Exit Application",                new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        Intent intent = new Intent(Intent.ACTION_MAIN);                        intent.addCategory(Intent.CATEGORY_HOME);                        startActivity(intent);                    }                });*/        alertDialogBuilder.setPositiveButton("Retry", null);        alertDialogBuilder.setNegativeButton("Exit Application", null);        alertDialogBuilder.setCancelable(false);        final AlertDialog m_dlg = alertDialogBuilder.show();        //AlertDialog alertDialog = alertDialogBuilder.create();        Button buttonRetry = m_dlg.getButton(DialogInterface.BUTTON_POSITIVE);        buttonRetry.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View v) {                startDownload();                m_dlg.dismiss();            }        });        Button buttonHome = m_dlg.getButton(DialogInterface.BUTTON_NEGATIVE);        buttonHome.setOnClickListener( new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(Intent.ACTION_MAIN);                intent.addCategory(Intent.CATEGORY_HOME);                startActivity(intent);            }        });    }    // ディレクトリ作成メソッド    public void createDir(String[] tarDir) {        String dstDir;        for (int i = 0; i < tarDir.length; i++) {            // ローカルに保存するディレクトリ名            dstDir = LanguageDownloadActivity.this.getApplicationInfo().dataDir + tarDir[i];            File directory = new File(dstDir);            // ディレクトリがなければ作成            if (directory.exists() == false) {                if (directory.mkdir() == true) {                } else {                    Toast ts = Toast.makeText(this, "ディレクトリ作成に失敗",                            Toast.LENGTH_LONG);                    ts.show();                }            }        }    }    /*@Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.main, menu);        return true;    }*/    // Resume        private boolean isBooted() {        SharedPreferences preference;        preference = getSharedPreferences("Launched", MODE_PRIVATE);                // 初回起動ならfalse        if (preference.getBoolean("Launched", false)==false) {            return false;        }        // ２回め以降の起動ならtrue        return true;    }    /**     * ダウンロードのタスク doInBackgroundの引数,onProgressUpdateの引数,doInBackgroundの返値     */    private int timeOutFlag = 0;    private class AsyncDownloadTask extends            AsyncTask<Integer, Integer, Integer> {        ProgressDialog progress = null;        //Integer[] nFileSize; // ファイルサイズ        Integer nFileSizeCount = 0; // ファイルの現在状況        Integer nTotalFileSize = 0;        Integer nTotalFileSizeCount = 0;        ArrayList<String> srcFiles = new ArrayList<String>();        String[] dstDir;        AsyncDownloadTask(ArrayList<String> srcFiles2, String[] dstDir2) {            srcFiles = srcFiles2;            dstDir = dstDir2;        }        /**         * 前処理         */        @Override        public void onPreExecute() {            // Dialog 表示            this.progress = new ProgressDialog(LanguageDownloadActivity.this);            this.progress.setCancelable(false); // プログレスバーの外やバックボタンの操作を停止            this.progress.setIndeterminate(false);            if (downloadPhase == 0 || downloadPhase == 1) {                this.progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);                this.progress.setMessage("Please wait");            } else {                this.progress.setButton(DialogInterface.BUTTON_NEGATIVE, "Cancel",                        new DialogInterface.OnClickListener() {                            public void onClick(DialogInterface dialog, int which) {                                // TODO Auto-generated method stub                                AsyncDownloadTask.this.cancel(false);                            }                        });                this.progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);                this.progress.setMessage("Downloading ...");                this.progress.setMax(0);                this.progress.setProgress(0);                this.progress.setSecondaryProgress(0);            }            this.progress.show();        }        /**         * バックグラウンド処理         */        @Override        protected Integer doInBackground(Integer... params) {            try {                Class.forName("android.os.AsyncTask");            } catch (ClassNotFoundException e) {            }                        if (srcFiles.size() == 0) return 0;                        if (downloadPhase == 2 && timeOutFlag == 1) {                return 0;            }                        // .tmpのファイルが有れば削除            if (downloadPhase == 1) {                String[] langPaths = new String[2];                langPaths[0] = LanguageDownloadActivity.this.getFilesDir().getAbsolutePath()                        + "/" + language + "/";                langPaths[1] = LanguageDownloadActivity.this.getFilesDir().getAbsolutePath()                        + "/pictures/";                File[] files;                File delFile;                for (int i = 0; i < 2; i++) {                    files = new File(langPaths[i]).listFiles();                    if (files != null) {                        for (int j = 0; j < files.length; j++) {                            if (files[j].toString().endsWith(".tmp")) {                                System.out.println("tmp file exists!");                                delFile = new File(files[j].toString());                                delFile.delete();                            }                        }                    }                }            }                        /*File[] dateFiles = new File(getApplicationInfo().dataDir +                     "/shared_prefs/").listFiles();            boolean fileExistsFlag = false;            if (dateFiles != null) {                for (int i = 0; i < dateFiles.length; i++) {                    if (dateFiles[i].getName().equals(                            language + "date.xml")) {                        fileExistsFlag = true;                        break;                    }                }            }*/                        timeOutFlag = 0;                        int max = srcFiles.size();            //nFileSize = new Integer[max];            /*for(int i = 0; i < max; i++) {                nFileSize[i] = 0;            }*/            URL url;            HttpURLConnection httpURLConnection = null;                        // ファイルの各サイズと合計サイズを取得            /*for (int i = 0; i < max; i++) {                try {                    String accessUrl = srcFiles.get(i).toString();                    // 最終更新日時の取得                    if (downloadPhase == 2) {                        SharedPreferences prefs =                                 getSharedPreferences(language + "date", Context.MODE_PRIVATE);                        String dates = prefs.getString(language + "date", "");                        if (!dates.equals("")) {                            accessUrl = srcFiles.get(i).toString() + "&date=" + dates;                        }                    }                                        url = new URL(accessUrl);                    httpURLConnection = (HttpURLConnection) url.openConnection();                                        // ダウンロードするファイルのサイズを取得                    httpURLConnection.setConnectTimeout(3000);                    httpURLConnection.setRequestMethod("GET");                    httpURLConnection.addRequestProperty("no-gzip", "1");                    httpURLConnection.connect();                    if (httpURLConnection.getResponseCode() == 200) {                        this.nFileSize[i] = httpURLConnection                                .getContentLength();                        this.nTotalFileSize += (int) this.nFileSize[i];                    }                } catch (MalformedURLException e) {                    e.printStackTrace();                } catch (ProtocolException e) {                    e.printStackTrace();                } catch (SocketTimeoutException e) {                    timeOutFlag = 1;                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                } finally {                }            }            httpURLConnection.disconnect();            url = null;*/                        // ファイルをダウンロード            for (int i = 0; i < max; i++) {                                // 全体のデータ量を設定                if(downloadPhase == 2 && i == 0) {                    this.nTotalFileSize = Integer.parseInt(srcFiles.get(i));                    continue;                }                                // ファイルの種類ごとにディレクトリ振り分け                // 0 -> 言語ディレクトリ:音声とテキスト, 1 -> 画像ディレクトリ:画像, 2-> URLディレクトリ                int dSelect;                if (srcFiles.get(i).substring(srcFiles.get(i).length() - 3)                        .equals("jpg")                        || srcFiles.get(i).substring(srcFiles.get(i).length() - 3)                        .equals("png")) {                    dSelect = 1;                } else if (srcFiles.get(i).substring(srcFiles.get(i).length() - 3)                        .equals("ogg")                        || srcFiles.get(i).substring(srcFiles.get(i).length() - 3)                        .equals("mp3")                        || srcFiles.get(i).substring(srcFiles.get(i).length() - 3)                        .equals("txt")) {                    dSelect = 0;                } else {                    dSelect = 2;                }                // ファイル名取り出しと格納                String srcFileName = null;                int index = srcFiles.get(i).lastIndexOf("/");                srcFileName = srcFiles.get(i).substring(index + 1);                if ((index = srcFileName.indexOf("?")) != -1) {                    String srcTest = srcFileName.substring(0, index);                    System.out.println(srcFileName.substring(0, index));                    // 初回のLanguageテーブルの情報取得ならsrcFileNameを書き換え                    if (srcTest.equals("getTable.cgi")) {                        srcFileName = "language.txt";                    } else if (srcTest.equals("getFilepath.cgi")) {                        srcFileName = "url.txt";                    } else if (srcTest.equals("getLocation.cgi")) {                        srcFileName = "location.txt";                        dSelect = 0;                    } else if (srcTest.equals("getPage.cgi")) {                        srcFileName = "page.txt";                        dSelect = 0;                    }                }                // 完了フラグ                boolean bComplete = false;                boolean bCancel = false;                // ファイル検査/*              File downFile = new File(dstDir[dSelect].toString()                        + srcFileName);                if (downFile.exists())                    this.nFileSizeCount = (int) downFile.length();                downFile = null;                // 読み込み終了している場合は次のファイルへ                if (this.nFileSizeCount == (int) this.nFileSize[i]) {                    this.nTotalFileSizeCount += (int) this.nFileSize[i];                    continue;                }*/                // ダウンロード先のテンポラリ                File temporary = new File(dstDir[dSelect].toString()                        + srcFileName + ".tmp");                if (temporary.exists()) {                    this.nFileSizeCount = (int) temporary.length();                } else {                    this.nFileSizeCount = 0;                    // ダウンロード用に新規ファイルを作成                    try {                        temporary.createNewFile();                    } catch (IOException e) {                        e.printStackTrace();                    }                }                try {                    url = new URL(srcFiles.get(i).toString());                    httpURLConnection = (HttpURLConnection) url                            .openConnection();                    System.out.println(srcFiles.get(i));                    // 実際のダウンロード処理                    httpURLConnection.setConnectTimeout(3000);                    httpURLConnection.setRequestMethod("GET");                    //httpURLConnection.addRequestProperty("no-gzip", "1");//                    httpURLConnection.setRequestProperty("Range", String//                            .format("byte=%d-%d", this.nFileSizeCount,//                                    (int) this.nFileSize[i]));                    httpURLConnection.connect();                    // データのダウンロードを開始                    int code = httpURLConnection.getResponseCode();                    if ((code == 200) || (code == 206)) {                        // HTTP 通信の内容をファイルに保存するためのストリームを生成                        InputStream inputStream = httpURLConnection                                .getInputStream();                        FileOutputStream fileOutputStream = new FileOutputStream(                                temporary, true);                        byte[] buffReadBytes = new byte[4096];                        for (int sizeReadBytes = inputStream                                .read(buffReadBytes); sizeReadBytes != -1; sizeReadBytes = inputStream                                .read(buffReadBytes)) {                            // ファイルに書き出し                            fileOutputStream.write(buffReadBytes, 0,                                    sizeReadBytes);                            // 進捗状況を更新する処理                            this.nFileSizeCount += sizeReadBytes;                            this.publishProgress(this.nTotalFileSizeCount                                    + this.nFileSizeCount);                            // キャンセルされているのであればフラグを立てて抜ける                            if (this.isCancelled()) {                                bCancel = true;                                break;                            }                        }                        fileOutputStream.close();                    }                    // ダウンロードの完了フラグを立てる                    bComplete = true;                } catch (MalformedURLException e) {                    e.printStackTrace();                } catch (ProtocolException e) {                    e.printStackTrace();                } catch (SocketTimeoutException e) {                    timeOutFlag = 1;                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                } finally {                    // ダウンロードが無事に完了しているのであればリネームする                    if (bComplete) {                        if (!bCancel) {                            temporary.renameTo(new File(dstDir[dSelect]                                    .toString() + srcFileName));                            this.nTotalFileSizeCount += this.nFileSizeCount;                        } else {                            break;                        }                    }                }            }            httpURLConnection.disconnect();            // TODO Auto-generated method stub            return 0;        }        /**         * 進捗処理         */        @Override        protected void onProgressUpdate(Integer... integers) {            this.progress.setMax(this.nTotalFileSize/1000);            this.progress.setProgress((this.nTotalFileSizeCount                    + this.nFileSizeCount)/1000);        }        /**         * キャンセル         */        protected void onCancelled() {            // ProgressDialog の削除            if (this.progress != null) {                this.progress.dismiss();                this.progress = null;            }            Toast.makeText(LanguageDownloadActivity.this,                    "Download is cancelled",                    Toast.LENGTH_LONG).show();        }        /**         * 後処理         */        @Override        public void onPostExecute(Integer result) {            //this.nFileSize = null;            // ProgressDialog の削除            if (this.progress != null) {                this.progress.dismiss();                this.progress = null;            }                        // タイムアウト時トースト表示            if (timeOutFlag == 1 && downloadPhase != 2) {                Toast.makeText(LanguageDownloadActivity.this,                         "Connection Timeout", Toast.LENGTH_LONG).show();            }            // リストビュー生成            listViewSet();            ListView lv = (ListView) findViewById(R.id.languageDownloadListView1);            lv.setOnItemClickListener(new ListItemClickListener());            // 通信できずにリストの項目が0ならダイアログを表示            if (lv.getCount() == 0 && downloadPhase == 0) {                createRetryDialog();            }                        // ダウンロードが正常に完了すればダウンロードした日時を日本時間で保存            if (downloadPhase == 2) {                if (timeOutFlag != 1) { // タイムアウトせず通信が行えた場合時間保存                    SharedPreferences prefs = getSharedPreferences(language                            + "date", Context.MODE_PRIVATE);                    SharedPreferences.Editor editor = prefs.edit();                    Calendar cal = Calendar.getInstance();                    TimeZone jst = TimeZone.getTimeZone("Asia/Tokyo");                    cal.setTimeZone(jst);                    SimpleDateFormat sdf = new SimpleDateFormat(                            "yyyyMMddHHmmss", Locale.JAPANESE);                    sdf.setTimeZone(TimeZone.getTimeZone("Asia/Tokyo"));                    String dates = sdf.format(cal.getTime());                    editor.putString(language + "date", dates);                    editor.apply();                                        prefs = getSharedPreferences("downloaded", Context.MODE_PRIVATE);                    editor = prefs.edit();                    editor.putBoolean("downloaded", true);                      editor.commit();                }                                // 現在選択されている言語のDL時間を保存したxmlがあるか                /*File[] files = new File(getApplicationInfo().dataDir +                         "/shared_prefs/").listFiles();                boolean fileExistsFlag = false;                for (int i = 0; i < files.length; i++) {                    if(files[i].getName() == language + "date.xml") {                        fileExistsFlag = true;                    }                }*/                                // 選択されている言語を保存                SharedPreferences prefs = getSharedPreferences("Language", Context.MODE_PRIVATE);                SharedPreferences.Editor editor = prefs.edit();                editor.putString("Language", language);                editor.apply();                                // もし初回起動ならSharedPreferenceを更新                if (!isBooted()) {                    //プリファレンスの書き変え                      prefs = getSharedPreferences("Launched", Context.MODE_PRIVATE);                    editor = prefs.edit();                    editor.putBoolean("Launched", true);                      editor.commit();                  }                                // トーストでダウンロード完了を通知                Toast.makeText(LanguageDownloadActivity.this,                        "CurrentLanguage : " + currentLang + "\nDownload Complete",                        Toast.LENGTH_LONG).show();                // 言語選択画面を閉じてスタートメニュー画面へ                finish();            }                        String str = "";            int index = srcFiles.get(0).indexOf("?");            if (index != -1)                str = srcFiles.get(0).substring(0, index);            if (str.equals(getFilePathUri)) {                File dataDir = LanguageDownloadActivity.this.getFilesDir();                File urlPath = new File(dataDir.getAbsolutePath());                try {                    BufferedReader br = new BufferedReader(                            new InputStreamReader(new FileInputStream(urlPath                                    + "/url/" + "url.txt"), "UTF-8"));                    String line;                    // 空行まで読み飛ばす                    while ((line = br.readLine()).length() != 0)                        System.out.println(line);                    srcFiles.clear();                    // URLを記述したテキストの最後の行までループ                    while ((line = br.readLine()) != null) {                        srcFiles.add(line);                    }                    br.close();                                        // 現在選択されている言語のDL時間を保存したxmlがあるか                    File[] dateFiles = new File(getApplicationInfo().dataDir +                             "/shared_prefs/").listFiles();                    boolean fileExistsFlag = false;                    if (dateFiles != null) {                        for (int i = 0; i < dateFiles.length; i++) {                            System.out.println(dateFiles[i].getName());                            if (dateFiles[i].getName().equals(                                    language + "date.xml")) {                                fileExistsFlag = true;                                break;                            }                        }                    }                    // ディレクトリが空でタイムアウトした時と                    // 一部のファイルしかDLできていない言語がタイムアウトした時は言語を変化させない                    File[] files = new File(getFilesDir().getAbsolutePath()                            + "/" + language).listFiles();                    if ((timeOutFlag == 1 && files.length == 0) ||                            (timeOutFlag == 1 && fileExistsFlag == false)) {                        Toast.makeText(LanguageDownloadActivity.this,                                "Please retry Language-Select in a place under good radio wave condition.",                                Toast.LENGTH_LONG).show();                        return;                    }                                        // 未ダウンロードファイルまたは、更新されたファイルがあればダウンロード                    if (srcFiles.size() != 2) {                        downloadPhase = 2;                        AsyncDownloadTask task = new AsyncDownloadTask(srcFiles,                                dstDir);                        task.execute(0);                    } else { // 正常に通信して更新ファイルがないことを確認した時                        // 選択されている言語を保存                        SharedPreferences prefs = getSharedPreferences(                                "Language", Context.MODE_PRIVATE);                        SharedPreferences.Editor editor = prefs.edit();                        editor.putString("Language", language);                        editor.apply();                                                // ダウンロードすべきファイルがなければその旨を通知                        Toast.makeText(LanguageDownloadActivity.this,                                "CurrentLanguage : " + currentLang + "\nFiles are already up-to-date.",                                Toast.LENGTH_LONG).show();                                                // 画面を閉じる                        finish();                    }                                                        } catch (FileNotFoundException e) { // 初回でURL一覧のDLができなかった場合urlテキストをBRに読む際に発生                    Toast.makeText(LanguageDownloadActivity.this,                             "Please retry Language-Select in a place under good radio wave condition.",                            Toast.LENGTH_LONG).show();                } catch (Exception e) {                    Toast.makeText(LanguageDownloadActivity.this, "Language files download error",                            Toast.LENGTH_SHORT).show();                }            }        }    }            // オプションメニューの生成    public static final int START_MENU = 0;    public static final int VOICE_GUIDE = 1;    public static final int INFORMATION = 2;    //public static final int SELECT_LANGUAGE = 3;    public static final int HOW_TO_USE = 4;            @Override    public boolean onCreateOptionsMenu(Menu menu) {        if (isBooted()) {            menu.add(0, START_MENU, 0, "Start Menu");            menu.add(0, VOICE_GUIDE, 0, "Voice Guidance");            menu.add(0, INFORMATION, 0, "Text Guidance");            //menu.add(0, SELECT_LANGUAGE, 0, "Select Language");            menu.add(0, HOW_TO_USE, 0, "Help");        }        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        Intent intent;        switch (item.getItemId()) {        case START_MENU:            intent = new Intent(this, StartMenuActivity.class);            startActivity(intent);            return true;                    case VOICE_GUIDE:            intent = new Intent(this, VoiceNavigationActivity.class);            startActivity(intent);            return true;                    case INFORMATION:            intent = new Intent(this, InformationListActivity.class);            startActivity(intent);            return true;                    /*case SELECT_LANGUAGE:            intent = new Intent(this, LanguageDownloadActivity.class);            startActivity(intent);            return true;*/                    case HOW_TO_USE:            intent = new Intent(this, HowToListActivity.class);            startActivity(intent);            return true;                case android.R.id.home:            finish();            return true;        }        return super.onOptionsItemSelected(item);    }}