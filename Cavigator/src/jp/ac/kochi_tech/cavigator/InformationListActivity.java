package jp.ac.kochi_tech.cavigator;import java.io.BufferedReader;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Point;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.util.TypedValue;import android.view.Display;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;public class InformationListActivity extends Activity implements OnItemClickListener {    private String language;        static List<String> items = new ArrayList<String>();    static ArrayAdapter<String> arrayAdapter;        private BaseAdapter baseAdapter;    private ArrayList<String> imagePaths = new ArrayList<String>();    private ArrayList<String> textPaths = new ArrayList<String>();        private ArrayList<String> placeName = new ArrayList<String>(); // 場所名    private ArrayList<String> textFileName = new ArrayList<String>(); // テキストファイル名    private ArrayList<String[]> imageFileName = new ArrayList<String[]>(); // 画像ファイル名    private ArrayList<String[]> imageNameList = new ArrayList<String[]>();    private int numOfContents = 0; // 場所の要素数をカウントする変数    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setTitle("Text Guidance");        getActionBar().setDisplayHomeAsUpEnabled(true);         // Keep screen on        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        setContentView(R.layout.activity_information_list);                // 現在の言語を習得        SharedPreferences prefs =                 getSharedPreferences("Language", Context.MODE_PRIVATE);        language = prefs.getString("Language", "");                // 場所名、テキスト、画像のセットを変数に格納        readPageFile();               // 画像のパスを取得        getImagePath();                ListView listView = (ListView)findViewById(R.id.informationListListView1);                baseAdapter = new ListViewAdapter(this.getApplicationContext(),                 R.layout.information_list_row, items, imagePaths);                // リストビューに要素を設定        listView.setAdapter(baseAdapter);        listView.setOnItemClickListener(this);    }        /*@Override    public void onWindowFocusChanged(boolean hasFocus) {     // 場所名、テキスト、画像のセットを変数に格納        readPageFile();               // 画像のパスを取得        getImagePath();                ListView listView = (ListView)findViewById(R.id.informationListListView1);                baseAdapter = new ListViewAdapter(this.getApplicationContext(),                 R.layout.information_list_row, items, imagePaths);                // リストビューに要素を設定        listView.setAdapter(baseAdapter);        listView.setOnItemClickListener(this);    }*/        class ViewHolder {        TextView textView;        ImageView imageView;    }    class ListViewAdapter extends BaseAdapter {        private LayoutInflater inflater;        private Bitmap bmp = null;        public ListViewAdapter(Context context, int layoutId,                List<String> itemList, List<String> imgList) {            super();            this.inflater = (LayoutInflater) context                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);        }        @Override        public View getView(int position, View convertView, ViewGroup parent) {            ViewHolder holder;            // 最初だけ View を inflate して、それを再利用する            if (convertView == null) {                convertView = inflater.inflate(R.layout.information_list_row, parent,                        false);                // ViewHolder を生成                holder = new ViewHolder();                holder.textView = (TextView) convertView                        .findViewById(R.id.information_list_textView1);                holder.imageView = (ImageView) convertView                        .findViewById(R.id.information_list_imageView1);                convertView.setTag(holder);            }            // holder を使って再利用            else {                holder = (ViewHolder) convertView.getTag();            }                                    Display display = getWindowManager().getDefaultDisplay();            Point p = new Point();            display.getSize(p);                        final BitmapFactory.Options options = new BitmapFactory.Options();            File file = new File(imagePaths.get(position));            if (file.exists() && file.isFile()) { // ファイルが存在するとき                // 画像のサイズを取得                options.inJustDecodeBounds = true;                BitmapFactory.decodeFile((String)imagePaths.get(position), options);                // 表示すべきサイズを計算                options.inSampleSize =                         calculateInSampleSize(options, p.x, (int)(p.y / 3.5));                options.inJustDecodeBounds = false;                // 現在の position にある画像リストのパスをデコード                bmp = BitmapFactory                        .decodeFile((String)imagePaths.get(position), options);                                // holder の imageView にセット                holder.imageView.setImageBitmap(bmp);                holder.imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);                ViewGroup.LayoutParams params = holder.imageView.getLayoutParams();                params.width = p.x;                params.height = (int)(p.y / 3.5);                holder.imageView.setLayoutParams(params);            } else {                // drawableから読み込み                Resources res = getResources();                Drawable drawable = res.getDrawable(R.drawable.noimage);                holder.imageView.setImageDrawable(drawable);                holder.imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);                ViewGroup.LayoutParams params = holder.imageView.getLayoutParams();                params.width = p.x;                params.height = (int)(p.y / 3.5);                holder.imageView.setLayoutParams(params);            }                        // assetsから読み込み            /*InputStream is = null;            try {                is = getResources().getAssets().open("noimage.jpg");            } catch (IOException e) {                e.printStackTrace();            }            bmp = BitmapFactory.decodeStream(is);            holder.imageView.setImageBitmap(bmp);*/                        // 現在の position にあるファイル名リストを holder の textView にセット            holder.textView.setText(items.get(position));            holder.textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, (int)(p.y/85));            return convertView;        }        @Override        public int getCount() {            // items の全要素数を返す            return items.size();        }        @Override        public Object getItem(int position) {            return null;        }        @Override        public long getItemId(int position) {            return 0;        }    }        public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {                  // 画像の元サイズ          final int height = options.outHeight;          final int width = options.outWidth;          int inSampleSize = 1;                if (height > reqHeight || width > reqWidth) {              if (width > height) {                  inSampleSize = (int)Math.floor((float)height / (float)reqHeight);              } else {                  inSampleSize = (int)Math.floor((float)width / (float)reqWidth);              }          }          return inSampleSize;      }          String imageFilePath;    String textFilePath;        // 画像のパスを取得    private void getImagePath() {                imageFilePath = getApplicationInfo().dataDir + "/files/pictures/";        textFilePath = getApplicationInfo().dataDir + "/files/" + language + "/";                 //File[] files;        // 複数回呼び出された時用に初期化        items.clear();        imagePaths.clear();        textPaths.clear();                // 画像またはテキストファイルがあるときリストの要素として登録        for (int i = 0; i < numOfContents; i++) {            if(!textFileName.get(i).equals("") || !imageFileName.get(i)[0].equals("")) {                items.add(placeName.get(i));                imagePaths.add(imageFilePath + imageFileName.get(i)[0]);                imageNameList.add(imageFileName.get(i));                textPaths.add(textFilePath + textFileName.get(i));            }        }                /*files = new File(filePath).listFiles();        Arrays.sort(files);        if (files != null) {            for (int i = 0; i < files.length; i++) {                if( files[i].isFile() && files[i].getName().endsWith(".jpg") ||                    files[i].isFile() && files[i].getName().endsWith(".png")) {                    items.add(files[i].getName());                    imagePaths.add(filePath + "/" + files[i].getName());                }            }        }*/    }        // クリック時に呼び出されるメソッド    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {        Intent intent = new Intent(this.getApplicationContext(), InformationDispActivity.class);        //String selectedImagePath = (String) imagePaths.get(position);        String[] selectedImagePath = new String[imageNameList.get(position).length];        for(int i = 0; i < selectedImagePath.length; i++) {            selectedImagePath[i] = imageFilePath + imageNameList.get(position)[i];        }        String selectedTextPath = (String) textPaths.get(position);        // インテントに値をセット 画像のパス : imagePath, テキストのパス : textPath        intent.putExtra("imagePath", selectedImagePath);        intent.putExtra("textPath", selectedTextPath);        intent.putExtra("placeName", items.get(position));        // 新しいActivityの開始        startActivity(intent);    }        // 場所名、テキスト、画像のセットを取得    private void readPageFile() {        try {            BufferedReader br = new BufferedReader(new InputStreamReader                    (new FileInputStream(getApplicationInfo().dataDir +                            "/files/" + language + "/" + "page.txt"), "UTF-8"));                        // リスト初期化            placeName.clear();            textFileName.clear();            imageFileName.clear();                        String line;            // 空行まで読み飛ばす            while ((line = br.readLine()).length() != 0)                System.out.println(line);            // テキストの最後の行までループ            while ((line = br.readLine()) != null) {                String[] splitString = line.split("," , -1);                placeName.add(splitString[1]);                textFileName.add(splitString[2]);                                String[] images = new String[splitString.length - 3];                System.arraycopy(splitString, 3, images, 0, images.length);                                imageFileName.add(images);                numOfContents++;            }            br.close();        } catch (IOException e) {        }    }    /*@Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.information_list, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }*/            // オプションメニューの生成    public static final int START_MENU = 0;    public static final int VOICE_GUIDE = 1;    //public static final int INFORMATION = 2;    public static final int SELECT_LANGUAGE = 3;    public static final int HOW_TO_USE = 4;            @Override    public boolean onCreateOptionsMenu(Menu menu) {        menu.add(0, START_MENU, 0, "Start Menu");        menu.add(0, VOICE_GUIDE, 0, "Voice Guidance");        //menu.add(0, INFORMATION, 0, "Text Guidance");        menu.add(0, SELECT_LANGUAGE, 0, "Select Language");        menu.add(0, HOW_TO_USE, 0, "Help");        return true;    }        @Override    public boolean onOptionsItemSelected(MenuItem item) {        Intent intent;        switch (item.getItemId()) {        case START_MENU:            intent = new Intent(this, StartMenuActivity.class);            startActivity(intent);            return true;                    case VOICE_GUIDE:            intent = new Intent(this, VoiceNavigationActivity.class);            startActivity(intent);            return true;                    /*case INFORMATION:            intent = new Intent(this, InformationListActivity.class);            startActivity(intent);            return true;*/                    case SELECT_LANGUAGE:            intent = new Intent(this, LanguageDownloadActivity.class);            startActivity(intent);            return true;                    case HOW_TO_USE:            intent = new Intent(this, HowToListActivity.class);            startActivity(intent);            return true;                case android.R.id.home:            finish();            return true;        }        return super.onOptionsItemSelected(item);    }    }